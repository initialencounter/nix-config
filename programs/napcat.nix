{ config, pkgs, lib, ... }: let
  sources = {
    # Generated by /update.sh - do not update manually!
    # Last updated: 2024-11-21.
    napcat_version = "v4.1.14";
    napcat_url = "https://github.com/NapNeko/NapCatQQ/releases/download/v4.1.14/NapCat.Shell.zip";
    napcat_hash = "sha256-FZ58YbgKGXWWdAhI2UlkEA6Nt/6rEOPZcS56QRvSMF0=";
    qq_version = "3.2.13-2024.11.21";
    qq_amd64_url = "https://dldir1.qq.com/qqfile/qq/QQNT/Linux/QQ_3.2.13_241121_amd64_01.deb";
    qq_amd64_hash = "sha256-ASSW3k9eGrqMfOyi73LbQgPGYOwH7UFFPsIOoTDmXHU=";
    qq_arm64_url = "https://dldir1.qq.com/qqfile/qq/QQNT/Linux/QQ_3.2.13_241121_arm64_01.deb";
    qq_arm64_hash = "sha256-SWR1XdN2RdbSqufpzKHlL07P6/BtcOd5FWZA308p+I8=.";
  };
  napcat-shell-zip = pkgs.fetchurl {
    url = sources.napcat_url;
    hash = sources.napcat_hash;
  };

  srcs = {
    x86_64-linux = pkgs.fetchurl {
      url = sources.qq_amd64_url;
      hash = sources.qq_amd64_hash;
    };
    aarch64-linux = pkgs.fetchurl {
      url = sources.qq_arm64_url;
      hash = sources.qq_arm64_hash;
    };
  };

  currentSystem = pkgs.stdenv.hostPlatform.system;
  src = srcs.${currentSystem} or (throw "Unsupported system: ${currentSystem}");
  patched = pkgs.qq.overrideAttrs (old: {
    buildInputs = (old.buildInputs or []) ++ [ pkgs.unzip ];  # 添加 unzip 到依赖中
    version = "3.2.13-2024.11.21";
    inherit src;
    postFixup = ''
      mkdir -p $out/opt/QQ/resources/app/napcat
      unzip ${napcat-shell-zip} -d $out/opt/QQ/resources/app/napcat
      echo "(async () => {await import('/root/napcat/napcat.mjs');})();" > $out/opt/QQ/resources/app/loadNapCat.js
      sed -i 's|"main": "[^"]*"|"main": "./loadNapCat.js"|' $out/opt/QQ/resources/app/package.json
    '';
    meta = {};
  });
in {
  systemd.services.napcat = {
    description = "NapCat";

    after = [ "network-pre.target" ];
    wants = [ "network-pre.target" ];
    wantedBy = [ "multi-user.target" ];

    # have the job run this shell script
    script = with pkgs; ''
    #!${pkgs.runtimeShell}
    mkdir -p data
    ${pkgs.bubblewrap}/bin/bwrap \
      --unshare-all \
      --share-net \
      --as-pid-1 \
      --uid 0 --gid 0 \
      --clearenv \
      --ro-bind /nix/store /nix/store \
      --bind ./data /root \
      --proc /proc \
      --dev /dev \
      --tmpfs /tmp \
      ${pkgs.writeScript "sandbox" ''
        #!${pkgs.runtimeShell}

        createService() {
          mkdir -p /services/$1
          echo -e "#!${pkgs.runtimeShell}\n$2" > /services/$1/run
          chmod +x /services/$1/run
        }

        export PATH=${lib.makeBinPath (with pkgs;
          [ busybox xorg.xorgserver ]
        )}
        export HOME=/root
        export XDG_DATA_HOME=/root/.local/share
        export XDG_CONFIG_HOME=/root/.config
        export TERM=xterm
        mkdir -p /usr/bin /bin
        ln -s $(which env) /usr/bin/env
        ln -s $(which sh) /bin/sh

        export DISPLAY=':114'
        createService xvfb 'Xvfb :114 > /dev/null 2>&1'
        if [ ! -f /root/napcat/napcat.mjs ]; then
          cp ${patched}/opt/QQ/resources/app/napcat /root/napcat -r
          echo "{\"port\": 6099,\"token\": \"WEBUI_TOKEN\",\"loginRate\": 3}" > /root/napcat/config/webui.json
        fi
        createService program "${patched}/bin/qq --no-sandbox -q 1114039391 $@"
        runsvdir /services
      ''} "$@"
  '';
  };
}
